## Enable Virutal Environment  [DONE]
    -> go to 'project's' root folder
        * "cd 01_flask_to_do_cwh"
    -> install vicrutal Environment
        * "pip install virtualenv"
    -> create virtual Environment
        * "python3 -m venv virtualEnv"
    -> activate virtual Environment
        * "source virtualEnv/bin/activate"

## add .gitignore file  [DONE]
    -> add different files/folder
        * __pycache__
        * virtualEnv
        * .DS_Store

## Create requirements.txt file  [DONE]
    -> if install any module/library using 'pip install', insert it's name
        * django
    -> write 'install command in the terminal:
        * 'pip install -r requirements.txt'


## Install "Django" extension for VS Code [ALREADY DONE]
    -> write 'django' in the search bar
    -> install the extension of "Baptiste Darthenay"



------------------------------------ tasks/steps --------------------------------------


## Install Django  [DONE]
    -> add 'django' into the requirements.txt file
    -> in the virtual environment write the 'install command' 
        * 'pip install -r requirements.txt'

## Create 'django project'  [DONE]
    -> type "django-admin startproject <app-name>
        * "django-admin startproject basic_app"

## Start Django Server:  [NOT NEEDED NOW]
    -> if you are in the parent folder go to the 'project' folder  
        - go to 'basic_app' from '01_django_basic_app_cwh'
            * cd basic_app
    -> run the 'runserver' command
        * python manage.py runserver
        - server will be opened in "127.0.0.1:8000" link 
    -> there can be an error -> "You have 18 unapplied migration(s). Your project may not work properly..."
        - write the command, and the warning will not be shown again
            * python manage.py migrate


## Rename Project: [NOT NEEDED]
    -> Source: https://stackoverflow.com/a/67640413
    -> replace all the <old-project-name> into <new-project-name>
        - replace the directory (folders) name 
        - replace from all the project's files 
    -> [TRICK] just find-replace the old-name into new-name, where-ever you find the old-name. That's it!


## Create app:  [DONE]
    -> go to the 'project' folder (if already not in the location)
        * cd basic_project
    -> write 'startapp' command
        * python manage.py startapp basic_app

    -> in 'ecommerce/settings.py' register 'basic_app'   [ALREADY DID]
        - from 'store/apps.py' copy the class-name 'StoreConfig'
        - write this line inside 'INSTALLED_APPS' list (have to be string and put a comma after that)
        * INSTALLED_APPS = [
                'store.apps.StoreConfig',
                '......
            ]
    -> That's it!

## Create 'urls.py' in the basic_app:  [DONE]
    -> create 'urls.py' 
    -> copy the codes of 'basic_project/urls.py'
    -> paste the codes into the 'basic_app/urls.py'

## Defining "path-variables":  [DONE]
    -> first all the request comes to the 'basic_project/urls.py' file 
    -> then it can be directly send the user to a page
        OR, it will send the request to the 'basic_app/urls.py' file 
        - "/admin" path will be directly redirected to the "admin.site.urls"
        - "" can be redirect to the "basic_app/urls.py"
            * urlpatterns = [
            *    path('admin/', admin.site.urls),
            *    path("", include('basic_app.urls'))
            * ]
    
    -> 'basic_app/urls.py' generally redirect links to 'basic_app/views.py'
        * from basic_app import views

        * urlpatterns = [
        *    path("", views.index, name = "home")
        * ]

    -> 'basic_app/view.py' generally have different function with 'end-points'
        * from django.shortcuts import render, HttpResponse

        * def index(request):
        *    return HttpResponse("This is HOME PAGE")

## adding "about", "Services", or "Contact" pages   [DID SIMILAR]
    -> in the 'basic_app/urls' add different end-points 
        * urlpatterns = [
            ..... , 
            path("about", views.about, name = "about"), 
            path("services", views.services, name = "services"), 
            path("contact", views.contact, name = "contact"), 
         ]
    -> in the 'basic_app/vies.py' add different functions
        * ......
          ......
          def about(request):
              return HttpResponse("This is ABOUT page")
          def services(request):
              return HttpResponse("This is SERVICES page")
          def contact(request):
              return HttpResponse("This is CONTACT page")
    
    -> That's it!
    
    *** QUESTION:
        ** Why we've not added any code into 'basic_project/urls.py', and the server given expected-output?


## adding 'static' and 'templates' files:  [DONE]
    -> create two directories exactly inside '01_django_basic_app_cwh/basic_project/basic_project' folder
        - create 'static' and 'templates' directory
        - for 'static' folder-> inside 'basic_projects/settings.py' add this:
            * # manually added
              STATICFILES_DIRS = [
                  os.path.join(BASE_DIR, "static"),
              ]

        - for 'templates' folder-> inside 'basic_projects/settings.py' add this:
            * TEMPLATES = [
                  {
                      'BACKEND': "....",
                      'DIRS': [ os.path.join(BASE_DIR, "templates") ],
                      ..........
                  },
              ]
    -> inside the 'static' folder you can add different files like-> .txt, .mp4, .html, etc.
        - create a file named 'test.txt' and write something into this. Save it.
        - go to "127.0.0.1:8000/static/test.txt" link
        - you will see the writings inside the file in the browser 

    -> inside the 'templates' folder, you will generally add different .html, .js- type files 
        - create a file named 'index.html' and add some code in it. Save it.
        - use "return render(request, "index.html")" instead of "return HttpResponse("This is HOME page")"


## sending 'data' into templates files 
    -> define a dictionary.
        * context = {
            "variable_1": "This is variable 1",
            "variable_2": "This is variable 2"
          }
    -> pass the dictionary to 'render(....)' function
        * return render(request, "index.html", context)

    -> in the "index.html" file access the passed key:
        * {{variable_1}}
        * <b> {{variabel_2}} </b>
        - Example: 
            * <p>
                <b>variable_1 = {{variable_1}}</b>
                <br/>
                <b>variable_2 = {{variable_2}}</b>
                <br/>
              </p>



## Adding HTML ELEMENTS from Bootstrap: [DONE, just copy-pasted 'starter code' [DONE SIMILAR]
    and from: "https://github.com/CoreyMSchafer/code_snippets/tree/master/Django_Blog/03-Templates"]
    -> from "https://getbootstrap.com/docs/4.4/getting-started/introduction/"
        - copy-paste the 'starter code' into 'index.html' file 
        - "Hello World!" will be shown 
    -> from 'components-> Navbar':
        - paste the navbar code inside <body> section 
    -> Change the Names of the different nav-items
        - from 'Link' to 'About us' or, from 'Dropdown' to 'Services'
    -> set the end points 
        - href="#' to href"/", or href="/contact"
    -> change the theme:
        - from 'light' to 'dark'


## "Migrating": Beginning:  [DONE]
    -> first check if any migrations is pending now
        * "python manage.py makemigrations"
        - if nothing is pending, then show 
            -> "No changes detected"
        - else it will show some/one 'pending change' related file-name 
    
    -> write code to 'migrate'
        * "python manage.py migrate"
        - if this is the first time, these line will be shown
            * Operations to perform:
              Apply all migrations: admin, auth, contenttypes, sessions.....


## Creating "SuperUser":  [DONE]
    -> write:
        * python manage.py createsuperuser
    -> Give the user-name/passwords
    -> That's it!


## Changing "Django Administration" Site text: [ NOT NEEDED ]
    -> in the 'basic_project/urls.py':
        - below the 'import section' add these lines
        * admin.site.site_header = "UMSRA Admin"
          admin.site.site_title = "UMSRA Admin Portal"
          admin.site.index_title = "Welcome to UMSRA Researcher Portal"

        - change the values as your wish

## Using TEMPLATES: [Made main.html insteaad of base.html]
    -> make a file named 'base.html' and CUT-paste all codes from 'index.html
    -> in the 'base.html' file
        - below 'Navbar' section, create a BLOCK named 'body'
            * {% block body %}{% endblock body %}
            - if you type 'block' then the suggession will come 
        - inside <title>, create another BLOCK named 'title'
            * {% block title %}{% endblock title %}
    -> in the EMPTY 'index.html' file, write these lines
        * {% extends 'base.html' %}
        *
        * {% block title %}Home{% endblock title %}
        *
        * {% block body %}This is HOME page{% endblock body %}
    
    -> codes of the 'index.html' file will be replaced into base.html file's written blocks 

## making and assigning other pages' files  [ ALREADY DID SIMILAR ]
    -> inside 'templates/' folder:
        - create 'about.html', 'services.html' and 'contact.html' file 
        - copy paste the BLOCKS from 'index.html' 
        - slightly modify the texts
            -> change 'Home' into 'About Us'
        - That's it!
    
    -> assign the files into 'basic_app/views.py'
        - write this line inside 'def about(..)':
            * return render(request, "about.html") 
        - assign "services.html" and "contact.html" inside their relative functions 

## Design The webpages:   [ ALREADY DID SIMILAR ]
    ---> For index.html Do this: 
    -> copy-paste- corousel
        - go to "https://getbootstrap.com/docs/4.4/components/carousel/#with-captions"
        - copy-paste the 'with caption' corousel
    -> copy-paste- Album
        - go to "https://getbootstrap.com/docs/4.4/examples/album/"
        - copy-paste the album section's code below corousel
    -> get photoes from UNSPLASH.COM 
        - use "https://source.unsplash.com/<width>x<height>/?<tag-1>,<tag-2>,.." to get photoes
        - Example: "https://source.unsplash.com/1200x900/?library,novel"
        * <img src="https://source.unsplash.com/1200x900/?library,novel" class="d-block w-100" alt="...">
    - That's it!

    ---> For contact.html, Do this:
    -> add image from unsplash
    -> add a form from the 'getbootstrap.com'
    -> add a inside the form
    -> add a 'csrf_token' field
        - write 'csrf' and suggession will come 
        - Example: 
        * <form ...>
        *   {% csrf_token %}
        *   ....
        * </form>


## Create Models:  [DONE]
    -> in the 'basic_app/models.py':
        - create a class 'Contact' and define all the fields 
        - Example: 
        * # Create your models here.
        * class Contact(models.Model):
        *     name = models.CharField(max_length=100)
        *     email = models.CharField(max_length=100)
        *     phone = models.CharField(max_length=20)
        *     desc = models.TimeField()
        *     date = models.DateField() 
    
## FOR MIGRATION:  [DONE]
    -> REGISTER 'basic_app' and 'Contact'  
        - in 'basic_app/admin.py' register the 'Contact' class 
            * admin.site.register(Contact)

    -> write commands for migration:
        - write: "python manage.py makemigrations"
            - OUTPUT: Migrations for 'basic_app':
                        basic_app/migrations/0001_initial.py
                            - Create model Contact
        
        - then, write "python manage.py migrate"
            - OUTPUT: Operations to perform:
                        Apply all migrations: admin, auth, basic_app, contenttypes, sessions
                      Running migrations:
                        Applying basic_app.0001_initial... OK
    
    -> Go to the "127.0.0.1:8000/admin":
        - see a table named "Contact" is showing up 


## Showing our 'string' replacing "Custom Object(..)":  [DONE]
    -> just return our string into the "__str__" function.
        - Example: 
        * def __str__(self) -> str:
            return f"Name: [ {self.name} ] -    Desc: [ {self.desc} ]"
    -> now go to "http://127.0.0.1:8000/admin/basic_app/contact/"
        - you will see:
            -> "Name: [ Emdadul Islam ] - Desc: [ my comment ]"
        - instead of:
            -> "Custom Object(1)"


## Doing things in SHELL:  [NOT NEEDED NOW]
    -> in terminal write:
        * "python manage.py shell"
        - python interpreter will start 
        - you can write codes:
        - Example:
            * from basic_app.models import Contact

            * Contact.objects.all()
            * Contact.objects.all()[1]
            * Contact.objects.filter(name = "my name")

            * var = Contact.objects.filter(name = "my name")[0]
            * var.name = "my name changed"
            * var.save()
        
    -> can be practiced the queries from:
        - Source: "https://docs.djangoproject.com/en/4.1/topics/db/queries/"
    
    -> type "exit()" if you want to exit from the 

    -> MORE EXAMPLE: 
        >>> from django.contrib.auth.models import User
        >>> from blog.models import Post
        >>> 
        >>> User.objects.all()
        <QuerySet [<User: admin>]>
        >>> Post.objects.all()
        <QuerySet []>
        ----------------------------------------------------
        >>> user = User.objects.all()[0]
        >>> new_post = Post(title = "New Post title", content = "New post content", author = user)
        >>> Post.objects.all()
        <QuerySet []>
        >>> new_post.save()
        >>> Post.objects.all()
        <QuerySet [<Post: New Post titile>]
        ----------------------------------------------------
        >>> user.post_set.all()
        <QuerySet [<Post: New Post title>]>
        >>> user.post_set.create(title = "Post title for new post", content="created post from the user.post_set")
        <Post: Post title for new post>
        >>> user.post_set.all()
        <QuerySet [<Post: New Post title>, <Post: Post title for new post>]>
        >>> Post.objects.all()
        <QuerySet [<Post: New Post title>, <Post: Post title for new post>]>


## CHANGE DATA REPRESENTATION:  [NOT NEEDED NOW]
    -> SOURCE: "https://docs.djangoproject.com/en/2.1/ref/templates/builtins/#date"
        - "For example: {{ value|date:"D d M Y" }}"

    -> to change the dates representation from "Aug. 17, 2022, 8:33 p.m." to "August 17, 2022":
        - in the index.html change the line:
        - FROM:
            * <small class="text-muted">{{ post.date_posted }}</small>
        - TO:
            * <small class="text-muted">{{ post.date_posted|date:"F d, Y" }}</small>









------------------------- ALMOST all new things ---------------------------



## created USERS app: [Created a "Customer" app]
    -> created the 'users' app by the command:
        * python manage.py startapp users 
    -> register the app in 'django_project/settings.py'
        * INSTALLED_APPS = [
            ... ,
            'users.apps.UsersConfig',
            ... ,
            ...
         ]
    -> created a file 'register.html':
        - in 'templates' create a folder name 'users'
        - in 'templates/users' created a file name 'index.html'
        - copy-paste any template if-any
            * {% extends "blog/base.html" %}
              {% block content %}
                  <div class="content-section">
                      <form method="POST">
                          {% csrf_token %}
                          ........
                      </form>
                      <div class="border-top pt-3">
                          ........
                      </div>
                  </div>
              {% endblock content %}
    
    -> in 'users/views.py' create 'register' function:
        * from django.contrib.auth.forms import UserCreationForm
          def register(request):
            form = UserCreationForm()
            return render(request, "users/register.html", {'form': form})
    
    -> in 'django_project/urls.py' add another url
        * from users import views as user_views
          urlpatterns = [
              ....... ,
              path('register/', user_views.register, name = "register"),
              ...
          ]



## working with the REGISTRATION form data: [DONE]
    -> STEP-1: in 'templates/users/register.html', modify this 
        - from "{{ form }}" to "{{ form.as_p }}"
        - this will make the form nicer

    -> STEP-2: in 'users/views.py', modify the 'register' function:
        * def register(request):
            if request.method == 'POST':
                form = UserCreationForm(request.POST)
                if form.is_valid():
                    username = form.cleaned_data.get('username')
                    return redirect('blog-home')
            else:
                form = UserCreationForm()
            return render(request, "users/register.html", {'form': form})

        

## Show 'success' message: [DONE]
    -> after successfully submit data, show the 'success' message 
        - in the 'users/views.py' import 'django messages'
        * "from django.contrib import messages"
        - send success message:
            -Example:
            * def register(request):
            *    if request.method == 'POST':
            *        ......
                    if form.is_valid():
                        ......
            *           messages.success(request, "Your message has been sent successfully!")
                        ......
                else:
                    ......
            *   return .....
    
    -> in the 'templates/blog/base.html' add these lines
        * {% if messages %}
            {% for message in messages %}
                <div class = "alert alert-{{message.tags}}">
                    {{ message }}
                </div>
            {% endfor %}
          {% endif %}



## adding 'EMAIL' field into the USER CREATION FORM: [DONE]
    -> in the 'django_project/users' folder, create 'forms.py' file
    -> add these lines of code 
        * from django import forms
          from django.contrib.auth.models import User
          from django.contrib.auth.forms import UserCreationForm
  
          class UserRegisterForm(UserCreationForm):
              email = forms.EmailField()
              
              class Meta:
                  model = User 
                  fields = ['username', 'email', 'password1', 'password2']
    -> in the 'users/views.py' 
        - import the 'forms.py' file
            * from users.forms import UserRegisterForm
        - replace all the 'UserCreationForm' by 'UserRegisterForm'
        - remove the import of 'UserCreationForm'

    -> That's it! the 'Email' Field is added successfully!


## make the UserRegistrationForm Nicer: [DONE]
    -> in the 'requirements.txt', add 'django-crispy-forms', and install it 
    -> in the 'django_project/settings.py' add 'crispy_forms' as app 
        * INSTALLED_APPS = [
            .....
            'crispy_forms',
            .....
        ]
    -> say crispy to use 'bootstrap4', in the 'settings.py' file 
        * CRISPY_TEMPLATE_PACK = "bootstrap4"
    
    -> in 'templates/users/register.html' add
        * {% extends 'base.html %}
          {% load crispy_forms_tags %}
          ....
        
        - modify this: {{form|crispy}}}
    
    -> Reload the 'register' page, and the form will be looking beautiful and the error-texts will also be pretty



## Work with django's POWERFUL AUTHENTICATION SYSTEM:
    -> First Step: prepare 'templates/users/login.html' and link this with 'django_project/urls.py'
        - copy-paste from 'register.html' and modify slightly 
            * ....
            * {% block content %}
            *     <div class="content-section">
            *         <form method="POST">
            *             {% csrf_token %}
            *             <fieldset class="form-group">
            *                 <legend class="border-bottom mb-4">Log In</legend>
            *                 {{ form|crispy }}
            *             </fieldset>
            *             <div class="form-group">
            *                 <button class="btn btn-outline-info" type="submit">Login</button>
            *             </div>
            *         </form>
            *         <div class="border-top pt-3">
            *             <small class="text-muted">
            *                 Need an account? <a class="ml-2" href={% url "register" %}>Sign Up Now</a>
            *             </small>
            *         </div>
            *     </div>
            * {% endblock content %}
        
        - add these lines in the 'django_project/urls.py'
            * .....
            * from django.contrib.auth import views as auth_views
            * .....
            * urlpatterns = [
            *     ....
            *     path('login/', auth_views.LoginView.as_view(template_name = "users/login.html"), name = "login"),
            *     ....
            * ]
        
        - add this line at the very last-line in 'django_project/settings.py'
            * LOGIN_REDIRECT_URL = "blog-home"
        
    -> Second Step: modify REGISTER route
        - modify 'templates/users/register.html' file
            - From:
                * Already Have An Account? <a class="ml-2" href="#">Sign In</a>
            - To:
                * Already Have An Account? <a class="ml-2" href={% url 'login' %}>Sign In</a> 
        - modify 'users/views.py' files 
            - From:
                * if form.is_valid():
                *    messages.success(request, f"Your account has been created successfully! You can now login into your account.")
                *    return redirect('login')
            - To:
                * if form.is_valid():
                *    form.save()
                *    username = form.cleaned_data.get('username')
                *    messages.success(request, f"Your account has been created successfully! You can now login into your account.")
                *    return redirect('login')

    -> Third Step: prepare 'templates/users/logout.html'and link this with 'django_project/urls.py'
        - copy-paste from 'register.html' and modify
            * {% extends "blog/base.html" %}
            * {% block content %}
            *     <h2>You have been logged out!</h2>
            *     <div class="border-top pt-3">
            *         <small class="text-muted">
            *             <a href={% url 'login' %}>Log In again.</a>
            *         </small>
            *     </div>
            * {% endblock content %} 

        - add these lines in the 'django_project/urls.py'
            * .....
            * urlpatterns = [
            *     ....
            *     path('logout/', auth_views.LoginView.as_view(template_name = "users/logout.html"), name = "logout"),
            *     ....
            * ]


## Improving UI/UX:
    -> linking nav-bar's 'login' & 'register':
        - in 'templates/blog/base.html' modify these two lines 
        - From:
            *   <a class="nav-item nav-link" href="#">Login</a>
            *   <a class="nav-item nav-link" href="#">Register</a> 
        - To:
            * {% if user.is_authenticated %}
            *     <a class="nav-item nav-link" href={%url 'logout'%}>Logout</a>
            * {% else %}ss
            *     <a class="nav-item nav-link" href={%url 'login'%}>Login</a>
            *     <a class="nav-item nav-link" href={%url 'register'%}>Register</a>
            * {% endif %}


## Creating Profile Page & adding "@login_required"
    -> in 'templates/users/' folder create 'profile.html' file
        - add these lines of code:
            * {% extends "blog/base.html" %}
            * {% load crispy_forms_tags %}
            * {% block content %}
            *     <h1>User Name: {{ user.username }}</h1>
            * {% endblock content %}
    -> in "django_project/urls.py" add 'profile' url 
        * urlpatterns = [
        *     ......
        *     path('profile/', user_views.profile, name = "profile"),
        *     .....
        * ]
    -> in "users/views.py" add 'profile(..)' with '@login_required'
        * from django.contrib.auth.decorators import login_required
        * @login_required
        * def profile(request):
        *     return render(request, "users/profile.html")
    -> in 'django_project/settings.py' add this into very-last line:
        * LOGIN_URL = "login"



## Creating "Profile" Model
    -> in "users/models.py" create the 'Profile' model
        * from django.contrib.auth.models import User
        * class Profile(models.Model):
        *     user = models.OneToOneField(User, on_delete=models.CASCADE)
        *     image = models.ImageField(default = 'default.jpg', upload_to = "profile_pics")
        *     
        *     def __str__(self) -> str:
        *         return f"{self.user.username} profile"
    
    -> install 'Pillow' library for working-with 'ImageField'
        - add 'Pillo' into 'requirements.txt' file and write this command
            * "pip install -r requirements.txt" 
    
    -> register 'Profile' into 'users/admin.py' file:
        * from users.models import Profile
        *
        * admin.site.register(Profile)
    

## Working with 'Profile' model in SHELL 
    >>> from django.contrib.auth.models import User
    >>> user = User.objects.all()[0]
    >>> user
    <User: admin>
    >>> user.profile
    <Profile: admin profile>
    >>> user.profile.image
    <ImageFieldFile: profile_pics/Screenshot_20220116-105856.png>

    ---------------------------------
    >>> image = user.profile.image
    >>> image.width
    720
    >>> image.height
    1440
    >>> image.url
    '/profile_pics/Screenshot_20220116-105856.png'
    


## Creating MEDIA-DIRECTORY:
    -> in 'django_project/settings.py' add these lines
        * MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
        * MEDIA_URL = "/media/"
    -> now, delete all the 'profiles' from "http://127.0.0.1:8000/admin/users/profile/"
    -> recreate a 'profile', and there will be new directory called 'django_project/media' will appear in the file structure

    -> delete the previous 'profile_pics' directory [Did not finish, now finished it]


## update 'templates/users/profile.html' [ALREADY DONE TWO COMMITS AGO, but didn't documented then]
    * {% block content %}
    * <div class="content-section">
    *     <div class="media">
    *     <img class="rounded-circle account-img" src="{{ user.profile.image.url }}">
    *     <div class="media-body">
    *         <h2 class="account-heading">{{ user.username }}</h2>
    *         <p class="text-secondary">{{ user.email }}</p>
    *     </div>
    *     </div>
    *     <!-- FORM HERE -->
    * </div>
    * {% endblock content %}


## adding 'media' path into the 'urlpatterns'
    - in the 'django_project/urls.py', add these lines
    * ....
    * from django.conf.urls.static import static
    * from django.contrib.auth import views as auth_views
    * ...
    * urlpatterns = [
    *    .....
    * ]
    *
    * if settings.DEBUG:
    *   urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

    - this will add the 'media' into 'urlpatterns'
    
    -> don't FORGET to add a "Profile" object manually, to test the 'default.jpg' image's connection 


## Create PROFILE along with CREATING USER- AUTOMATICALLY: 
    - create 'signals.py' in 'django_project/users' folder 
    - add these codes:
        * from django.db.models.signals import post_save
        * from django.contrib.auth.models import User
        * from django.dispatch import receiver
        * from users.models import Profile
        * 
        * 
        * @receiver(post_save, sender = User)
        * def create_profile(sender, instance, created, *kwargs):
        *     if created:
        *         Profile.objects.create(user = instance)
        *     
        *     
        * @receiver(post_save, sender = User)    
        * def save_profile(sender, instance, *kwargs):
        *     instance.profile.save()
    
    - in 'users/apps.py/' add these codes
        * class UsersConfig(AppConfig):
        *   ....
        *   ....
        *
        *   def ready(self):
        *       import users.signals
    

## UPDATING models:
    -> in 'users/forms.py' file, add these two form-class for updating user & profile:        
        * class UserUpdateForm(forms.ModelForm):
        *     email = forms.EmailField()
        *     
        *     class Meta:
        *         model = User 
        *         fields = ['username', 'email']
        *         
        *         
        * class ProfileUpdateForm(forms.ModelForm):
        *     class Meta:
        *         model = Profile 
        *         fields = ['image']
    

    -> in 'users/views.py', modify the 'profile()' view
        - From: 
            * @login_required
            * def profile(request):
            *     return render(request, "users/profile.html", context)

        - To:
            * @login_required
            * def profile(request):
            *     if request.method == "POST":
            *         u_form = UserUpdateForm(request.POST, 
            *                                 instance=request.user)
            *         p_form = ProfileUpdateForm(request.POST, 
            *                                 request.FILES, 
            *                                 instance=request.user.profile)
            *         
            *         if u_form.is_valid() and p_form.is_valid():
            *             u_form.save()
            *             p_form.save()
            *             messages.success(request, f"Your account has been updated successfully!")
            *             return redirect('profile')
            *             
            *     else:
            *         u_form = UserUpdateForm(instance=request.user)
            *         p_form = ProfileUpdateForm(instance=request.user.profile)
            *     
            *     context = {
            *         "u_form" : u_form,
            *         "p_form" : p_form
            *     }
            *     
            *     return render(request, "users/profile.html", context)

    
    -> in the 'templates/users/profile.html', add these lines from "<!-- From here --->"
        * <form method="POST" enctype="multipart/form-data">
        *        {% csrf_token %}
        *        <fieldset class="form-group">
        *            <legend class="border-bottom mb-4">Update Profile</legend>
        *            {{ u_form|crispy }}
        *            {{ p_form|crispy }}
        *        </fieldset>
        *        <div class="form-group">
        *            <button class="btn btn-outline-info" type="submit">Update</button>
        *        </div>
        *  </form>


## adding author's profile-image into the home-page's posts 
    -> in the 'templates/blog/index.html' add this line
        * <article class="media content-section">
        *     <img class="rounded-circle article-img" src="{{ post.author.profile.image.url }}">
        *     <div class="media-body">
        *         .......
        *     </div>
        * </article>





----------------------------- Starting with Class-Based VIEWS -----------------------------

## We can transform our function-based views into class-based views, they do our different 'boiler-plate' tasks out-of-the box.
    -> in 'blog/views.py' follow these steps to make a class-based view
        - First, import the 'ListView'
            * from django.views.generic import ListView
        - Second, you will define a class which inherits from 'ListView'
            * "class PostListview(ListView):"
        - Third, you'will say the model-name, where the 'ListView' will work on 
            * "model = Post"
        - [OPTIONAL] Fourth, for the replacement of "render(request, template_name, context)" we write:
            * template_name: str = "blog/home.html"    
            * context_object_name: str = "posts"
            ** by default 'django' use template_name = "<app>/<model>_<viewtype>.html" && context_object_name = "object"
        - [OPTIONAL] Fifth, if you try to customize the ordering of the List-View [ascending to descending  etc.]:
            * "ordering = ['-date_posted']"
            ** by default it was: "ordering = ['-date_posted']"

        - Full 'LIST-VIEW' at one place:
        * class PostListview(ListView):
        *    model = Post
        *    template_name: str = "blog/home.html"    #<app>/<model>_<viewtype>.html
        *    context_object_name: str = "posts"
        *    ordering = ['-date_posted']
    
    -> in 'blog/urls.py', add these lines:
        * ....
        * from blog.views import PostListview
        * ....
        * urlpatterns = [
        *     # path("", views.home, name = "blog-home"), #replacing this line with next line
        *     path("", PostListview.as_view(), name = "blog-home"),
        *     .....
        * ]

    -> in "index.html", complete the 'href'-tag 
        - From: 
            * <h2><a class="article-title" href="#">{{ post.title }}</a></h2>
        - To:
            * <h2><a class="article-title" href="{% url 'post-detail' post.id %}">{{ post.title }}</a></h2>


## Creating "Post_Detail" view:
    -> in "blog/views.py" add these lines
        * ....
        * from django.views.generic import ListView, DetailView
        * ....
        * class PostDetailView(DetailView):
        *     model = Post

    -> in "blog/urls.py" add these lines
        * ....
        * from blog.views import PostListview, PostDetailView
        * ....
        * urlpatterns = [
        *     .....
        *     path("post/<int:pk>/", PostDetailView.as_view(), name = "post-detail"),
        *     .....
        * ]

    -> in "templates/blog/" create "post_detail.html" and copy-paste codes from 'index.html'. refined code-snippet will be:
        * {% extends "blog/base.html" %}
        * {% block content %}
        *     <article class="media content-section">
        *         <img class="rounded-circle article-img" src="{{ object.author.profile.image.url }}">
        *         <div class="media-body">
        *         <div class="article-metadata">
        *             <a class="mr-2" href="#">{{ object.author }}</a>
        *             <small class="text-muted">{{ object.date_posted|date:"F d, Y" }}</small>
        *         </div>
        *         <h2 class="article-title">{{ object.title }}</h2>
        *         <p class="article-content">{{ object.content }}</p>
        *         </div>
        *     </article>
        * {% endblock content %}
    
    -> go to the "http://127.0.0.1:8000/post/1/" link, and you will find the post detail of id-1 post 



## Actually Creating a post ("CREATE_POST"):
    ->  in "blog/views.py" create a class called 'PostCreateView'
        * "class PostCreateView(CreateView):"
        -  set the 'model' and 'fields' (it'will contain post-creation form):
            * model = Post
            * fields = ["title", "content"]
        -  set the  'author'
            * class PostCreateView(CreateView):
            *   .....  
            *   def form_valid(self, form):
            *       form.instance.author = self.request.user
            *       return super().form_valid(form)

        - the whole 'Post Create View" will be:
            * class PostCreateView(CreateView):
            *   model = Post
            *   fields = ["title", "content"]
            *   
            *   def form_valid(self, form):
            *       form.instance.author = self.request.user
            *       return super().form_valid(form)


    -> in "blog/urls.py" add the 'post creation url'
        * urlpatterns = [
        *     ....
        *     path("post/new/", PostCreateView.as_view(), name = "post-create"),
        *     ....
        * ]
    

    -> in "templates/blog/" folder create 'post_form.html' file:
        * {% extends "blog/base.html" %}
        * {% load crispy_forms_tags %}
        * {% block content %}
        *     <div class="content-section">
        *         <form method="POST">
        *             {% csrf_token %}
        *             <fieldset class="form-group">
        *                 <legend class="border-bottom mb-4">Create Post</legend>
        *                 {{ form|crispy }}
        *             </fieldset>
        *             <div class="form-group">
        *                 <button class="btn btn-outline-info" type="submit">Post</button>
        *             </div>
        *         </form>
        *     </div>
        * {% endblock content %}

    
    -> in "blog/models.py" add these lines:
        * from django.urls import reverse
        * class Post(models.Model):
        *   ....
        *   ....
        *   def __str__(self) -> str:
        *       ......
        *   
        *   def get_absolute_url(self):
        *       return reverse('post-detail', kwargs={"pk" : self.pk})

    
## adding "Login Required" requirement into the 'CreatePostView'
    -> in 'blog/views.py', import 'LoginRequiredMixin'
        * "from django.contrib.auth.mixins import LoginRequiredMixin"
    -> add "LoginRequiredMixin" into the parameter list of 'CreatePostView'
        - From:
            * "class PostCreateView(CreateView):"
        - To:
            * "class PostCreateView(LoginRequiredMixin, CreateView):" 


## Creating "update post" and using "UserPassesTestMixin":
    -> in 'blog/views.py', create 'PostUpdateView' [copy-pasting from 'CreatePostView"]
        * class PostUpdateView(LoginRequiredMixin, UpdateView):
        *   model = Post
        *   fields = ["title", "content"]
        * 
        *   def form_valid(self, form):
        *       form.instance.author = self.request.user
        *       return super().form_valid(form)
    
    -> in 'blog/urls.py', add an 'update' url:
        * urlpatterns = [
        *     ....
        *     path("post/<int:pk>/update/", PostUpdateView.as_view(), name = "post-update"),
        *     ....
        * ]
    
    -> add 'UserPassesTestMixin':
        - From:
            * class PostUpdateView(LoginRequiredMixin, UpdateView):
            *     ......
        - To:
            * class PostUpdateView(LoginRequiredMixin, UserPassesTestMixin, UpdateView):
            *      ......
            *      def test_func(self):
            *          post = self.get_object()
            *          if post.author == self.request.user:
            *              return True
            *          return False


## DELETE-POST and using 'LoginRequiredMixin'-'UserPassesTestMixin':
    -> in "blog/views.py" create 'PostDeleteView':
        - import 'DeleteView' and write these code
        * class PostDeleteView(LoginRequiredMixin, UserPassesTestMixin, DeleteView):
        *     model = Post
        *     success_url = "/"
        *     
        *     def test_func(self):
        *         post = self.get_object()
        *         if post.author == self.request.user:
        *             return True
        *         return False
       
    -> in 'blog/urls.py', add an 'delete' url:
        * urlpatterns = [
        *     ....
        *     path("post/<int:pk>/delete/", PostDeleteView.as_view(), name = "post-delete"),,
        *     ....
        * ]

    -> in "templates/blog/" folder, create 'post_confirm_delete.html':
        * {% extends "blog/base.html" %}
        * {% block content %}
        *     <div class="content-section">
        *         <form method="POST">
        *             {% csrf_token %}
        *             <fieldset class="form-group">
        *                 <legend class="border-bottom mb-4">Delete Post</legend>
        *                 <h2>Are you sure you want to delete the post "{{object.title}}"</h2>
        *             </fieldset>
        *             <div class="form-group">
        *                 <button class="btn btn-outline-danger" type="submit">Yes, Delete</button>
        *                 <a class="btn btn-outline-secondary" href = "{% url 'post-detail' object.id %}">Cancel</a>
        *             </div>
        *         </form>
        *     </div>
        * {% endblock content %}


## Connecting all the 'create', 'update', 'delete' links into the 'blog-site'
    -> in 'templates/blog/base.html' add this line:
            *<div class="navbar-nav">
            *   {% if user.is_authenticated %}
            *       <a class="nav-item nav-link" href={%url 'post-create'%}>Create Post</a>
            *       ......
            *   {% else %}
            *       ......
            *   {% endif %}
            *</div>
    -> in 'templates/blog/post_details.html', add these lines:
        * <div class="article-metadata">
        *     .....
        *     {% if object.author == user %}
        *         <div>
        *             <a class="btn btn-secondary btn-sm mt-1 mb-1" href="{% url 'post-update' object.id %}">Update</a>
        *             <a class="btn btn-danger btn-sm mt-1 mb-1" href="{% url 'post-delete' object.id %}">Delete</a>
        *         </div>
        *     {% endif %}
        * </div>


## Importing items from JSON file:
    -> in the root 'django_project/' folder, create 'post.json' file
        - copy-paste the json texts from the below link: 
        - LinK: https://github.com/CoreyMSchafer/code_snippets/blob/master/Django_Blog/11-Pagination/django_project/posts.json
    
    -> Open python shell using: "python manage.py shell" command
        - write these commands:

        >>> import json
        >>> from blog.models import Post
        >>> with open('posts.json') as f:
        ...   posts_json = json.load(f)
        ... 
        >>> for post in posts_json:
        ...   post = Post(title = post['title'], content = post['content'], author_id = post['user_id'])
        ...   post.save()
        ... 
        >>> exit()
    
    -> Hurrah!! all the 'posts' has been loaded into the DB 


## Playing with "Paginator":
    -> open the python shell with: "python manage.py shell"
    -> Write these commands:
    * >>> from django.core.paginator import Paginator
    * >>> posts = ['1', '1', '1', '1', '1']
    * >>> p = Paginator(posts, 2)
    * >>> p.num_pages
    * 3
    * >>> for page in p.page_range:
    * ...   print(page)
    * ... 
    * 1
    * 2
    * 3

    * >>> p1 = p.page(1)
    * >>> p1
    * <Page 1 of 3>
    * >>> p1.number
    * 1
    * >>> p1.object_list
    * ['1', '1']
    * >>> p1.has_previous()
    * False
    * >>> p1.has_next()
    * True
    * >>> p1.next_page_number()
    * 2


## Applying Pagination in the real site:
    -> in 'blogs/views.py' add this line:
        * class PostListview(ListView):
        *    ....
        *    paginate_by: int = 2
    

    -> Now run the 'runserver' command and see that, there is only 2 posts into the home page
        - if you write this into address-bar, you will find another 2 posts,
        - "http://127.0.0.1:8000/?page=2" [have 3rd & 4th posts]
        - "http://127.0.0.1:8000/?page=3" [have 5th & 6th posts]
        - "http://127.0.0.1:8000/?page=4" [have 7th & 8th posts]


    -> in 'templates/blog/index.html' add these lines:
        * {% extends "blog/base.html" %}
        * {% block content %}
        *     {% for post in posts %}
        *         ......
        *     {% endfor %}
        *     
        *     {% if is_paginated %}
        *     
        *        {% if page_obj.has_previous %}
        *            <a class="btn btn-outline-info mb-4" href="?page=1">First</a>
        *            <a class="btn btn-outline-info mb-4" href="?page={{ page_obj.previous_page_number }}">Previous</a>
        *        {% endif %}
        *     
        *        {% for num in page_obj.paginator.page_range %}
        *            {% if page_obj.number == num %}
        *            <a class="btn btn-info mb-4" href="?page={{ num }}">{{ num }}</a>
        *            {% elif num > page_obj.number|add:'-3' and num < page_obj.number|add:'3' %}
        *            <a class="btn btn-outline-info mb-4" href="?page={{ num }}">{{ num }}</a>
        *            {% endif %}
        *        {% endfor %}
        *     
        *        {% if page_obj.has_next %}
        *            <a class="btn btn-outline-info mb-4" href="?page={{ page_obj.next_page_number }}">Next</a>
        *            <a class="btn btn-outline-info mb-4" href="?page={{ page_obj.paginator.num_pages }}">Last</a>
        *        {% endif %}
        * 
        *     {% endif %}
        * {% endblock content %}
    
    -> UPDATE: update the pagination: "paginate_by: int = 5"



## Showing a user's all-posts:
    -> in 'blog/views.py', add this view:
        * from django.shortcuts import render, get_object_or_404
        * from django.contrib.auth.models import User
        *
        * class UserPostListview(ListView):
        *   model = Post
        *   template_name: str = "blog/user_posts.html"  # <app>/<model>_<viewtype>.html
        *   context_object_name: str = "posts"
        *   paginate_by: int = 5
        *   
        *   def get_queryset(self):
        *       user = get_object_or_404(User, username = self.kwargs.get("username"))
        *       return Post.objects.filter(author = user).order_by("-date_posted")
      
    -> in 'blog/urls.py', add an 'delete' url:
        * urlpatterns = [
        *     ....
        *     path("user/<str:username>", UserPostListview.as_view(), name = "user-posts"),
        *     ....
        * ]
    
    -> copy-paste the 'base.html' codes and modify like this:
        * {% extends "blog/base.html" %}
        * {% block content %}
        *     <h1 class="mb-3"> Posts by "{{ view.kwargs.username }} ({{page_obj.paginator.count }})" </h1>
        *     {% for post in posts %}
        *         .....
        *         <div class="media-body">
        *             <div class="article-metadata">
        *             <a class="mr-2" href="{% url 'user-posts' post.author.username %}">{{ post.author }}</a>
        *             ......
        *         </div>
        *         </article>
        *     {% endfor %}
        *     
        *     {% if is_paginated %}
        *       ...... 
        *     {% endif %}
        * {% endblock content %}




---------------------- Working with JS ------------------------

## start working with JS files
    -> in 'static/' folder, create a new folder called 'js'
    -> in 'static/js' create a file 'cart.js' and write these code
        * console.log("Hello World!")
    -> in 'template/store/main.html' adding this line at the bottom of 'body' section
        * <!DOCTYPE html>
        * {% load static %}
        * <html>
        *     <head>
        *         ...
        *     </head>
        *     <body>
        *         ....
        *         <script type="text/javascript" src="{% static 'js/cart.js' %}"></script>
        *     </body>
        * </html>
    -> Now, reload any page, 'inspect' it and go to 'console' section.
        - you will see the 'Hellow World' in the console



## Working with HTML-ELEMENTS by JAVASCR:
    -> in the 'store.html' file replace this line:
        - From:
            * <button  class="btn btn-outline-secondary add-btn">Add to Cart</button>
        - To:
            * <button data-product={{product.id}} data-action="add"  class="btn btn-outline-secondary add-btn update-cart">Add to Cart</button>

    -> in the cart.js file write this code 
        * var updateBtns = document.getElementsByClassName('update-cart')
        * console.log('updateBtns.length = ', updateBtns.length)
        * 
        * for(i = 0; i < updateBtns.length; i++){
        *     updateBtns[i].addEventListener('click', function(){
        *         var productId = this.dataset.product 
        *         var action = this.dataset.action
        *         console.log('productId:', productId, 'action:', action)
        * 
        *         console.log('USER: ', user) -------------------- (1)
        *         if(user == 'AnonymousUser'){
        *             console.log('not logged in...')
        *         }else{
        *             updateUserOrder(productId, action)
        *         }
        *     })
        * }

    -> For (1), add this into "main.html":
        * <script type="text/javascript">
        *   var user = '{{request.user}}'
        * </script>



## "FETCH" to different URL using JS:
    -> in the "cart.js" file write this code 
        * function updateUserOrder(productId, action){
        *        console.log('User is authenticated, sending data...')
        *
        *        url = '/update_item/' ------------------- (1)
        *
        *        // var form = document.getElementById('form')
        *        // var csrftoken = form.getElementsByTagName('input')[0].value
        *
        *        fetch(url, {
        *            method: 'POST',
        *            headers: {
        *                'Content-Type' : 'application/json',
        *                'X-CSRFToken': csrftoken, ---------------------(2)
        *            },
        *            body: JSON.stringify({
        *                'productId:': productId, 'action': action 
        *            })
        *        })
        *
        *        .then((response) => {
        *            return response.json()
        *        })
        *        
        *        .then((data)=>{
        *            console.log('data:', data)
        *        })
        *  }

    -> for (1), in "views.py" and "urls.py", add these:
        - Views.py:
            * def UpdateItem(request):
            *     return JsonResponse('Item was added', safe=False)
        - urls.py:
            * path('update_item/', views.UpdateItem, name = 'update_item')
    
    -> for (2), in the 'main.html' file add this function 
        * <script type="text/javascript">
        *        var user = ....
        *        var csrftoken = getCSRFToken('csrftoken');
        *
        *        function getCSRFToken(name) {
        *            var cookieValue = null;
        *            if (document.cookie && document.cookie != '') {
        *                var cookies = document.cookie.split(';');
        *                for (var i = 0; i < cookies.length; i++) {
        *                    var cookie = jQuery.trim(cookies[i]);
        *                    // Does this cookie string begin with the name we want?
        *                    if (cookie.substring(0, name.length + 1) == (name + '=')) {
        *                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
        *                        break;
        *                    }
        *                }
        *            }
        *            return cookieValue;
        *        }
        *   </script>



## FIX: 'csrf not generating' issue
    -> NOT-SECURED: add '@csrf_exempt'
        - in 'views.py' file, add these 
            * from django.views.decorators.csrf import csrf_exempt
            * @csrf_exempt
            * def UpdateItem(request):
            *     return JsonResponse('Item was added', safe=False)
    
    -> ERROR-PRONE: adding "{% csrf_token %}":
        - under a '<form>' add: 
            * "{% csrf_token %}" 
        
        - ERROR: 
            -> We are submitting 'POST' request, but it's not from a FORM 
            -> So, we are generating the "csrf_token" by JS method
            -> But, we cannot use {% csrf_token %} into a JS code, 
            -> So, whenever we've to generate a CSRF_TOKEN, we won't be able to use this method
    
    -> ANOTHER approach [WORKING PROPERLY]:
        - Source: "https://stackoverflow.com/a/33924554"
        - mainly 'not-generating csrf_token' problem creates for JQUERY.
        - So, we will use this line into our "main.html" file:
            * <head>
            *    <title>....</title>
            *    <script src="http://code.jquery.com/jquery-1.11.3.min.js"></script>
            *    <meta name="viewport"...... />
            * </head> 



## RELOADING a page:
    -> just add "location.reload()" and that's it!
        - in 'cart.js', add the command:
            * function updateUserOrder(...){
            *     ...
            *     fetch(...)
            *     .then(....)
            *     .then((data){
            *         ....
            *         location.load()
            *     })
            * }



## HIDE/SHOW any HTML element:
    -> (1) you can set "innerHTML = '' "
    -> or, (2) you can set "classList.add('hidden')"
        - In "checkout.html", we've written this code:
        *  <script type="text/javascript">
        *      var shipping = '{{order.shipping}}'
        *      if(shipping == 'False'){
        *          document.getElementById("shipping-info").innerHTML = '' ---------- (1)
        *      }
        *  
        *      var form = document.getElementById('form')
        *  
        *      form.addEventListener('submit', function(e){
        *          e.preventDefault()
        *          console.log('Form Submitted...')
        *  
        *          document.getElementById('form-button').classList.add('hidden') -------------(2)
        *          document.getElementById('payment-info').classList.remove('hidden') -----------(2)
        *      })
        *  </script>




## Creating Cookie:
    -> in "main.html", add this function in the '<script>' section:
        * <script type="text/javascript">
        *     ....
        *     function getToken(name) {
        *         .....
        *     }
        *     
        *     function getCookie(name){
        *         //split cookie string and get all individual 'name=value' pairs in an array
        *         var cookieArr = document.cookie.split(";")
        *     
        *         //Loop through the array elements
        *         for(var i = 0;  i<cookieArr.length; i++){
        *             var cookiePair = cookieArr[i].split("=")
        *     
        *             //removing whitespaces from the beginning and ending of the cookie name
        *             // and comparing it with the given string-> 'name'
        *     
        *             if(name == cookiePair[0].trim()){
        *                 //Decode the cookie value and return 
        *                 return decodeURIComponent(cookiePair[1])
        *             }
        *         }
        *     
        *         //return null if not found
        *         return null
        *     }
        *     
        *     var cart = JSON.parse(getCookie('cart'))
        *     if(cart == undefined){
        *         cart = {}
        *         console.log('Cart Created!', cart)
        *         document.cookie = 'cart=' + JSON.stringify(cart) + ';domain=;path=/'
        *     }
        *     console.log('Cart:', cart)
        * </script>



## Updating Cookie:
    -> in "cart.js" write this function:
        * function addCookieItem(productId, action){
        *     console.log('User is not logged in...')
        *     if(action == 'add'){
        *         if(cart[productId] == undefined){
        *             cart[productId] = {'quantity': 1}
        *         }else{
        *             cart[productId]['quantity'] += 1
        *         }
        *     }else if(action == 'remove'){
        *         cart[productId]['quantity'] -= 1
        * 
        *         if(cart[productId]['quantity'] <= 0){
        *             console.log('Item removed...')
        *             delete cart[productId]
        *         }
        *     }
        *     console.log('Cart: ', cart)
        *     document.cookie = 'cart=' + JSON.stringify(cart) + ';domain=;path=/'
        *     location.reload()
        * }




## Implementing 'wish-list-dummy-behaviour'
    -> if already 'active', then switch of the 'love-icon', else 'switch-on' the 'love-icon'
        - create 'wishlist.js' in 'static/js/' folder
        - add these codes 
            * var wishListButtons = document.getElementsByClassName('wish-list')
            * console.log('wishListButtons.length = ', wishListButtons.length)
            * 
            * for(i = 0; i < wishListButtons.length; i++){
            *     wishListButtons[i].addEventListener('click', function(){
            *         var productId = this.dataset.product 
            * 
            *         //for finding 'action', we have to get the clicked icon
            *         var wishIcons = this.getElementsByClassName('wish-list-icon')
            *         var action = wishIcons[0].dataset.action
            *         var clickedIcon = wishIcons[0]
            * 
            *         for(j = 0; j < wishIcons.length; j++){
            *             if(wishIcons[j].classList.contains('hidden') == false){
            *                 action = wishIcons[j].dataset.action
            *                 clickedIcon = wishIcons[j]
            *             }
            *         }
            * 
            *         console.log('productId:', productId, 'action:', action)
            * 
            *         console.log('USER: ', user)
            *         if(user == 'AnonymousUser'){
            *             alert('Login needed!')
            *         }else{
            *             updateWishList(productId, action, wishIcons)
            *         }
            *     })
            * }
            * 
            * 
            * function updateWishList(productId, action, wishIcons){
            *     console.log('User is authenticated, sending data...')
            * 
            *     url = '/update_wish_list/'
            * 
            *     fetch(url, {
            *         method: 'POST',
            *         headers: {
            *             'Content-Type' : 'application/json',
            *             'X-CSRFToken': csrftoken,
            *         },
            *         body: JSON.stringify({
            *             'productId': productId, 'action': action 
            *         })
            *     })
            * 
            *     .then((response) => {
            *         console.log('response: ', response)
            *         return response.json()
            *     })
            * 
            *     .then((data)=>{
            *         console.log('data:', data)
            *         
            *         var addIcon = wishIcons[0]
            *         var removeIcon = wishIcons[1]
            * 
            *         if(action == 'add'){
            *             addIcon.classList.add("hidden")
            *             removeIcon.classList.remove("hidden")
            *         }
            *         else if(action == 'remove'){
            *             addIcon.classList.remove('hidden')
            *             removeIcon.classList.add('hidden')
            *         }
            *     })
            * }
        
        - in 'store.html' file, add these lines of code:
            * <div class="box-element product">
            *     <strong>{{product.name}}</strong>
            *
            * --------------------- code adding STARTED ------------------------
            *     <a data-product={{product.id}} class="text-decoration-none wish-list" style="float:right">
            *         <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-heartt" viewBox="0 0 16 16">
            *             <path class="wish-list-icon add"  style="color:black" data-action="add" d="m8 2.748-.717-.737C5.6.281 2.514.878 1.4 3.053c-.523 1.023-.641 2.5.314 4.385.92 1.815 2.834 3.989 6.286 6.357 3.452-2.368 5.365-4.542 6.286-6.357.955-1.886.838-3.362.314-4.385C13.486.878 10.4.28 8.717 2.01L8 2.748zM8 15C-7.333 4.868 3.279-3.04 7.824 1.143c.06.055.119.112.176.171a3.12 3.12 0 0 1 .176-.17C12.72-3.042 23.333 4.867 8 15z"></path>
            *             <path class="wish-list-icon remove hidden" style="color:MediumSeaGreen" data-action="remove" fill-rule="evenodd" d="M8 1.314C12.438-3.248 23.534 4.735 8 15-7.534 4.736 3.562-3.248 8 1.314z"/>
            *         </svg>
            *     </a>
            *     
            * --------------------- code adding ENDED --------------------------
            *
            *     <hr>
            *     
            *     <button data-product={{product.id}} data-action="add"  class="btn btn-outline-secondary add-btn update-cart">Add to Cart</button>
            *     <a class="btn btn-outline-success" href="#">View</a>
            *     <h4 style="display: inline-block; float: right"><strong>${{product.price|floatformat:2}}</strong></h4>
            *     
            * </div>



## To work with "wishlist.html" add these code:
    * var wishListButtons = document.getElementsByClassName('wishlist-class-wish-list')
    * console.log('wishListButtons.length = ', wishListButtons.length)
    * 
    * for(i = 0; i < wishListButtons.length; i++){
    *     wishListButtons[i].addEventListener('click', function(){
    *         var productId = this.dataset.product
    *         console.log("productId = " + productId)
    * 
    *         //for finding 'action', we have to get the clicked icon
    *         var addIcon = document.getElementById("add-btn-" + productId)
    *         var action = "remove"
    * 
    *         console.log('productId:', productId, 'action:', action)
    * 
    *         console.log('USER: ', user)
    *         if(user == 'AnonymousUser'){
    *             alert('Login needed!')
    *         }else{
    *             removeFromWishList(productId, action)
    *         }
    *     })
    * }
    * 
    * 
    * function removeFromWishList(productId, action){
    *     console.log('User is authenticated, sending data...')
    * 
    *     url = '/update_wish_list/'
    * 
    *     fetch(url, {
    *         method: 'POST',
    *         headers: {
    *             'Content-Type' : 'application/json',
    *             'X-CSRFToken': csrftoken,
    *         },
    *         body: JSON.stringify({
    *             'productId': productId, 'action': action 
    *         })
    *     })
    * 
    *     .then((response) => {
    *         console.log('response: ', response)
    *         return response.json()
    *     })
    * 
    *     .then((data)=>{
    *         console.log('data:', data)
    *         // location.reload()
    *         var clickedItemId = document.getElementById("wishlist-item-id-" + productId)
    *         clickedItemId.classList.add("hidden")
    * 
    *         if(isAllItemHidden()){
    *             showNoContentText()
    *         }
    *     })
    * }
    * 
    * function isAllItemHidden(){
    *     var wishlistItemList = document.getElementsByClassName("wishlist-page-item")
    *     var hiddenItemCount = 0
    *     for(var i = 0; i < wishlistItemList.length; i++){
    *         if(wishlistItemList[i].classList.contains("hidden")){
    *             hiddenItemCount += 1
    *         }
    *     }
    *     
    *     return wishlistItemList.length == hiddenItemCount
    * }
    * 
    * function showNoContentText(){
    *     document.getElementById("wishlist-item-id-items").classList.add("hidden")
    *     document.getElementById("wishlist-item-id-no-content").classList.remove("hidden")
    * }




---------------------------------------- PURE JS IS NOW OVER NOW --------------------------------------



## ADDING-REMOVING product from CART 
    -> in "Views.py", change these codes
        - From:
            * def UpdateItem(request):
            *     return JsonResponse('Item was added', safe=False)
        - To:
            * def UpdateItem(request):
            *      data = json.loads(request.body)
            *      
            *      action = data['action']
            *      productId = data['productId']
            *      
            *      print(f"productId = {productId} ")
            *      print(f"action = {action}")
            *      
            *      customer = request.user.customer
            *      product = Product.objects.get(id = productId)
            *      order, created = Order.objects.get_or_create(customer = customer, complete = False)
            *      orderItem, created = OrderItem.objects.get_or_create(order=order, product=product)
            *      
            *      
            *      if action == 'add':
            *          orderItem.quantity += 1
            *          response_message = 'Item was ADDED successfully'
            *      elif action == 'remove':
            *          orderItem.quantity -= 1
            *          response_message = 'Item was DELETED successfully'
            *      
            *      orderItem.save()
            *      
            *      if orderItem.quantity <= 0:
            *          orderItem.delete()
            *      
            *      return JsonResponse(response_message, safe=False)
    

        - From:
            * def store(request):
            *     products = Product.objects.all()
            *     context={ 'products' : products }
            *     return render(request, 'store/store.html', context)

        - To:
            * def store(request):
            *      if request.user.is_authenticated:
            *          customer = request.user.customer
            *          order, created = Order.objects.get_or_create(customer = customer, complete = False)
            *          items = order.orderitem_set.all()
            *          noOfCartItems = order.get_number_of_items
            *      else:
            *          items = []
            *          order = {
            *              'get_cart_total': 0,
            *              'get_number_of_items': 0
            *          }
            *          noOfCartItems = order['get_number_of_items']
            *          
            *      products = Product.objects.all()
            *      context={ 'products' : products, 'noOfCartItems':  noOfCartItems }
            *      return render(request, 'store/store.html', context)

        
        - Also modify "def cart(...)" and "def checkout(...)"
            - add:
                * def cart/checkout(request):
                *      if request.user.is_authenticated:
                *          ....
                *          noOfCartItems = order.get_number_of_items
                *      else:
                *          ....
                *          noOfCartItems = order['get_number_of_items']
            - add:
                * context={ ... 'noOfCartItems':  noOfCartItems }
    
    -> in "main.html" modify this line:
        - From:
            * <p id="cart-total"> 0 </p>
        - To:
            * <p id="cart-total">{{ noOfCartItems }}</p>

    
    -> in "cart.html" modify these lines:
        - From: 
            * <img class="chg-quantity" src="{% static  'images/arrow-up.png' %}">
            * <img class="chg-quantity" src="{% static  'images/arrow-down.png' %}">
        - To: 
            * <img data-product={{item.product.id}} data-action="add"  class="chg-quantity update-cart" src="{% static  'images/arrow-up.png' %}">
            * <img data-product={{item.product.id}} data-action="remove"  class="chg-quantity update-cart" src="{% static  'images/arrow-down.png' %}">




## HIDE/SHOW 'Shipping Info' portion:
    -> in "models.py" add this '@property':
        * @property
        * def shipping(self):
        *     shipping = False
        *     order_items = self.orderitem_set.all()
        *     
        *     for item in order_items:
        *         if item.product.digital == False:
        *             shipping = True
        *             break
        *     return shipping
    
    -> in "views.py" add 'shipping' key for 'not-logged-in' users:
        - in 'def store()', 'def cart()', 'def checkout()', add these:
            * else:
            *   ....
            *   order = {
            *        ....
            *        'shipping' = False
            *    }
        
    -> in "checkout.html" add this JS code:
        * <script type="text/javascript">
        *     var shipping = '{{order.shipping}}'
        *     if(shipping == 'False'){
        *         document.getElementById("shipping-info").innerHTML = ''
        *     }
        * </script>



## HIDE/SHOW 'Checkout' BUTTON:
    -> in "checkout.html" add this JS code:
        * <script type="text/javascript">
        *     .....
        *     var form = document.getElementById('form')
        *     
        *     form.addEventListener('submit', function(e){
        *         e.preventDefault()
        *         console.log('Form Submitted...')
        *     
        *         document.getElementById('form-button').classList.add('hidden')
        *         document.getElementById('payment-info').classList.remove('hidden')
        *     })
        * </script>


## Handle "ORDER PROCESSING":
    -> in views.py, add this method:
        * def processOrder(request):
        *     print('Data: ', request.body)
        *     transaction_id = datetime.datetime.now().timestamp()
        *     data = json.loads(request.body)
        *     
        *     if request.user.is_authenticated:
        *         customer = request.user.customer
        *         order, created = Order.objects.get_or_create(customer = customer, complete = False)
        *         total = float(data['form']['total'])
        *         order.transaction_id = transaction_id
        *         
        *         if total == order.get_cart_total:
        *             order.complete = True
        *         order.save()
        *         
        *         if order.shipping == True:
        *             ShippingAddress.objects.create(
        *                 customer = customer,
        *                 order = order,
        *                 address = data['shipping']['address'],
        *                 city = data['shipping']['city'],
        *                 state = data['shipping']['state'],
        *                 zipcode = data['shipping']['zipcode'],
        *             )
        *         
        *     else:
        *         print('User is not authenticated....')
        *     return JsonResponse('Payment Completed...', safe=False)

    -> in "urls.py" add this url-path:
        * path('process_order/', views.processOrder, name = 'process_order'),

    -> in "checkout.html", modify '<script>' section:
        * <script type="text/javascript">
        *     ....
        *     var total = '{{order.get_cart_total}}'
        *     
        *     document.getElementById('make-payment').addEventListener('click', function(e){
        *         submitFormData()
        *     })
        *     function submitFormData(){
        *         console.log('Payment button clicked...')
        *     
        *         var userFormData = {
        *             'name' : null,
        *             'email' : null,
        *             'total' : total,
        *         }
        *         var shippingInfo = {
        *             'address' : null,
        *             'city' : null,
        *             'state' : null,
        *             'zipcode' : null,
        *         }
        *     
        *         if(shipping != 'False'){
        *             shippingInfo.address = form.address.value
        *             shippingInfo.city = form.city.value
        *             shippingInfo.state = form.state.value
        *             shippingInfo.zipcode = form.zipcode.value
        *         }
        *     
        *         if(user == 'AnonymousUser'){
        *             userFormData.name = form.name.value
        *             userFormData.email = form.email.value
        *         }
        *     
        *     
        *         var url = '/process_order/'
        *         fetch(url, {
        *             method: 'POST',
        *             headers:{
        *                 'Content-Type': 'application/json',
        *                 'X-CSRFToken': csrftoken
        *             },
        *             body: JSON.stringify({
        *                 'form': userFormData,
        *                 'shipping': shippingInfo
        *             }),
        *         })
        *         .then((response) => response.json())
        *         .then((data)=>{
        *             console.log('Success: ', data)
        *             alert('Transaction completed')
        *             window.location.href = "{% url 'store' %}"
        *         })
        *     }
        * </script>
        *     


## Showing items related info into "CART-PAGE" for "AnonymousUser":
    -> in "views.py", write this function:
        * def cart(request):
        *    if request.user.is_authenticated:
        *        ......
        *    else:
        *        try:
        *            cart = json.loads(request.COOKIES['cart'])
        *        except:
        *            cart = {}
        *            
        *        print('Cart: ', cart)
        *        items = []
        *        order = {
        *            'get_cart_total': 0,
        *            'get_number_of_items': 0,
        *            'shipping': False
        *        }
        *        noOfCartItems = order['get_number_of_items']
        *        
        *        for id in cart:
        *            try:
        *                noOfCartItems += cart[id]['quantity']
        *
        *                product = Product.objects.get(id= id)
        *                total = (product.price * cart[id]['quantity'])
        *
        *                order['get_cart_total'] += total
        *                order['get_number_of_items'] += cart[id]['quantity']
        *
        *                item = {
        *                    'product': {
        *                        'id': product.id,
        *                        'name': product.name,
        *                        'price': product.price,
        *                        'imageURL': product.imageURL
        *                    },
        *                    'quantity': cart[id]['quantity'],
        *                    'get_total': total
        *                }
        *                items.append(item)
        *
        *                if product.digital == False:
        *                    order['shipping'] = True 
        *            except:
        *                pass
        *    
        *    context={ 'items': items, 'order': order, 'noOfCartItems':  noOfCartItems }
        *    return render(request, 'store/cart.html', context)
        *



## taking the "guest-checkout" codes into "utils.py" file:
    -> in "ecommerce/store/", create a file named "utils.py"
    -> create a function and copy-paste codes from "views.py"
        - from "views.py" cut the else portion of "def cart()" function
            * def cart(request):
            *    if request.user.is_authenticated:
            *        ......
            *    else:
            *        ....... cut the whole "else" portion's code ..............

        - in "utils.py" create this function:
            * import json
            * from . models import *
            * 
            * def cookieCart(request):
            *     ....... paste here from "views.py" file's 'def cart()' method .......
            *     return {
            *         'noOfCartItems': noOfCartItems, 
            *         'order': order, 
            *         'items': items
            *     }

    -> get the returned values from "def cookieCart(...)" functions in the "def cart(..)" function:
            - the "def cart(..)" function will be like this:
            * import . utils import cookieCart
            * ....
            * ....
            *
            * def cart(request):
            *     if request.user.is_authenticated:
            *         customer = request.user.customer
            *         order, created = Order.objects.get_or_create(customer = customer, complete = False)
            *         items = order.orderitem_set.all()
            *         noOfCartItems = order.get_number_of_items
            *     else:
            *         cookieData = cookieCart(request = request)
            *         noOfCartItems = cookieData['noOfCartItems']
            *         order = cookieData['order']
            *         items = cookieData['items']
            * 
            *     context={ 'items': items, 'order': order, 'noOfCartItems':  noOfCartItems }
            *     return render(request, 'store/cart.html', context)
    
    -> follow this step for "def store()" and "def checkout()" functions also 



## cleaning up more codes from "views.py" file:
    -> create a function and copy-paste codes from "views.py"
        - from "views.py" cut the "if-else" portion of "def cart()" function
            * def cart(request):
            *    ........... cut the whole if-else block .............

        - in "utils.py" create this function:
            * def cartData(request):  ------------------ it's not "cookieCart(..)" function
            *     ....... paste here from "views.py" file's 'def cart()' method .......
            *     return {
            *         'noOfCartItems': noOfCartItems, 
            *         'order': order, 
            *         'items': items
            *     }

    -> get the returned values from "def cookieCart(...)" functions in the "def cart(..)" function:
            - the "def cart(..)" function will be like this:
            * import . utils import cookieCart, cartData
            * ....
            * ....
            *
            * def cart(request):
            *     cookieData = cartData(request = request)
            *     noOfCartItems = cookieData['noOfCartItems']
            *     order = cookieData['order']
            *     items = cookieData['items']
            * 
            *     context={ 'items': items, 'order': order, 'noOfCartItems':  noOfCartItems }
            *     return render(request, 'store/cart.html', context)
    
    -> follow this step for "def store()" and "def checkout()" functions also 



## process order for 'guest users':
    -> in "views.py", add these code into "fun processOrder()" function:
        * def processOrder(request):
        *     ...
        *     if request.user.is_authenticated:
        *         ...
        *     else:
        *         print('User is not authenticated....')
        *         
        *         print('COOKIES:', request.COOKIES)
        *         name = data['form']['name']
        *         email = data['form']['email']
        *         
        *         
        *         cookieData = cookieCart(request= request)
        *         items = cookieData['items']
        *         
        *         customer, created = Customer.objects.get_or_create(
        *             email = email
        *         )
        *         customer.name = name 
        *         customer.save()
        *         
        *         order = Order.objects.create(
        *             customer = customer,
        *             complete = False
        *         )
        *         
        *         for item in items:
        *             product = Product.objects.get(id= item['product']['id'])
        *             
        *             orderItem = OrderItem.objects.create(
        *                 product = product,
        *                 order = order,
        *                 quantity = item['quantity']
        *             )
        *     return JsonResponse('Payment Completed...', safe=False)
    
    -> move some codes of 'if' portion below the 'else' portion to avail them for both 'if' and 'else' block:
        - after moving the 'if' blocks code the whole "def processOrder()" function will be look like:
        * def processOrder(request):
        *     print('Data: ', request.body)
        *     transaction_id = datetime.datetime.now().timestamp()
        *     data = json.loads(request.body)
        *     
        *     if request.user.is_authenticated:
        *         customer = request.user.customer
        *         order, created = Order.objects.get_or_create(customer = customer, complete = False)
        *     else:
        *         print('User is not authenticated....')
        *         
        *         print('COOKIES:', request.COOKIES)
        *         name = data['form']['name']
        *         email = data['form']['email']
        *         
        *         
        *         cookieData = cookieCart(request= request)
        *         items = cookieData['items']
        *         
        *         customer, created = Customer.objects.get_or_create(
        *             email = email
        *         )
        *         customer.name = name 
        *         customer.save()
        *         
        *         order = Order.objects.create(
        *             customer = customer,
        *             complete = False
        *         )
        *         
        *         for item in items:
        *             product = Product.objects.get(id= item['product']['id'])
        *             
        *             orderItem = OrderItem.objects.create(
        *                 product = product,
        *                 order = order,
        *                 quantity = item['quantity']
        *             )
        *         
        *     # STARTED-COPY from 'if' block------------------------ 
        *
        *     total = float(data['form']['total'])
        *     order.transaction_id = transaction_id
        *     
        *     if total == order.get_cart_total:
        *         order.complete = True
        *     order.save()
        *     
        *     if order.shipping == True:
        *         ShippingAddress.objects.create( 
        *             customer = customer,
        *             order = order,
        *             address = data['shipping']['address'],
        *             city = data['shipping']['city'],
        *             state = data['shipping']['state'],
        *             zipcode = data['shipping']['zipcode'],
        *         )
        *     # ENDED-COPY from 'if' block--------------------------
        *
        *     return JsonResponse('Payment Completed...', safe=False)
        *     


##  moving 'process_order' codes to utils:
    -> in "utils.py" create this function:
        * def guestOrder(request, data):
        *     print('User is not authenticated....')
        *         
        *     print('COOKIES:', request.COOKIES)
        *     name = data['form']['name']
        *     email = data['form']['email']
        *     
        *     
        *     cookieData = cookieCart(request= request)
        *     items = cookieData['items']
        *     
        *     customer, created = Customer.objects.get_or_create(
        *         email = email,
        *     )
        *     customer.name = name 
        *     customer.save()
        *     
        *     order = Order.objects.create(
        *         customer = customer,
        *         complete = False
        *     )
        *     
        *     for item in items:
        *         product = Product.objects.get(id= item['product']['id'])
        *         
        *         orderItem = OrderItem.objects.create(
        *             product = product,
        *             order = order,
        *             quantity = item['quantity']
        *         )
        *     
        *     return customer, order

    -> in "views.py" modify the code of "def processOrder(...)" function:
        *def processOrder(request):
        *     print('Data: ', request.body)
        *     transaction_id = datetime.datetime.now().timestamp()
        *     data = json.loads(request.body)
        *     print(f"Data : {data}")
        *     
        *     if request.user.is_authenticated:
        *         customer = request.user.customer
        *         order, created = Order.objects.get_or_create(customer = customer, complete = False)
        *     else:
        *         #................... just added this line by removing all the codes from 'else' block..............................
        *         customer, order = guestOrder(request= request, data= data) 
        *         
        *     total = float(data['form']['total'])
        *     order.transaction_id = transaction_id
        *     
        *     if total == order.get_cart_total:
        *         order.complete = True
        *     order.save()
        *     
        *     if order.shipping == True:
        *         ShippingAddress.objects.create( 
        *             customer = customer,
        *             order = order,
        *             address = data['shipping']['address'],
        *             city = data['shipping']['city'],
        *             state = data['shipping']['state'],
        *             zipcode = data['shipping']['zipcode'],
        *         )
        *     return JsonResponse('Payment Completed...', safe=False)



## Working for integrating "Wishlist" page
    -> in "views.py" add this function:
        * def wishList(request):
        *    cookieData = cartData(request = request)
        *    noOfCartItems = cookieData['noOfCartItems']
        *        
        *    products = getWishListItems(request)
        *    # products = Product.objects.all()
        *    print('PRODUCTs: ', products)
        *    context={ 'products' : products, 'noOfCartItems':  noOfCartItems}
        *    return render(request, 'store/wishlist.html', context)

    -> in "urls.py" add this:
        * urlpatterns = [
        *     .....
        *     path('wishlist/', views.wishList, name = 'wishlist'),
        * ]
    -> Create "wishlist.html" in the "/template/store/" folder:
        -> add these lines:   
            * {% extends 'store/main.html' %}
            * {% load static %}
            * {% block content %}
            *     <div id="wishlist-item-id-items" class="row">
            *         {% for product in products %}
            *             <div id = 'wishlist-item-id-{{product.id}}' class="col-lg-4 wishlist-page-item">
            *                 <img class="thumbnail" src="{{product.imageURL}}">
            *                 <div class="box-element product">
            *                     <strong>{{product.name}}</strong>
            *                     <a data-product={{product.id}} class="text-decoration-none wishlist-class-wish-list" style="float:right">
            *                         <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-heartt" viewBox="0 0 16 16">
            *                             <path id="wish-list-remove-btn-{{product.id}}" style="color:MediumSeaGreen" fill-rule="evenodd" d="M8 1.314C12.438-3.248 23.534 4.735 8 15-7.534 4.736 3.562-3.248 8 1.314z"/>
            *                         </svg>
            *                     </a>
            * 
            *                     <hr>
            *             
            *                     <button data-product={{product.id}} data-action="add"  class="btn btn-outline-secondary add-btn update-cart">Add to Cart</button>
            *                     <a class="btn btn-outline-success" href="#">View</a>
            *                     <h4 style="display: inline-block; float: right"><strong>${{product.price|floatformat:2}}</strong></h4>
            *                 </div>
            *             </div>
            *         {% endfor %}
            *     </div>
            *     <div id="wishlist-item-id-no-content" class="no-content-text hidden" style="float:center">
            *         <h2>No content found! </h2>
            *     </div>
            * 
            * 
            *     {% if products|length > 0 %}
            *         <script>
            *             document.getElementById("wishlist-item-id-items").classList.remove("hidden")
            *             document.getElementById("wishlist-item-id-no-content").classList.add("hidden")
            *         </script>
            *     {% else %}
            *         <script>
            *             document.getElementById("wishlist-item-id-items").classList.add("hidden")
            *             document.getElementById("wishlist-item-id-no-content").classList.remove("hidden")
            *         </script>
            *     {% endif %}
            * {% endblock content %}



            

--------------------------------- PayPal Integration (I couldn't implement that, because the current country is BD) ------------------------------------

## adding javascript codes into the "checkout.html" page:
    -> Source: "https://developer.paypal.com/demo/checkout/#/pattern/client"
    -> in the place of our "make payment" button, we have to replace with "paypal payment buttons-id"
        - From:
            *  <div class="box-element hidden" id="payment-info">
            *      <small>Paypal Options</small>
            *      <button id="make-payment" class="ml-2">Make Payment</button>
            *  </div>
            * 
        - To:
            *  <div class="box-element hidden" id="payment-info">
            *      <small>Paypal Options</small>
            *      #<button id="make-payment" class="ml-2">Make Payment</button>
            *      <div id="paypal-button-container"></div>
            *  </div>
            *
    -> Comment-out 'make-payment-button' related JS codes:
        * # document.getElementById('make-payment').addEventListener('click', function(e){
        * #    submitFormData()
        * # })
        *
    -> in "checkout.html" page, before our <script> tag, add these lines:
        *  <!-- Include the PayPal JavaScript SDK -->
        *  <script src="https://www.paypal.com/sdk/js?client-id=test&currency=USD"></script>
        *  
        *  <script>
        *      // Render the PayPal button into #paypal-button-container
        *      paypal.Buttons({
        *  
        *          // Set up the transaction
        *          createOrder: function(data, actions) {
        *              return actions.order.create({
        *                  purchase_units: [{
        *                      amount: {
        *                          value: '88.44'
        *                      }
        *                  }]
        *              });
        *          },
        *  
        *          // Finalize the transaction
        *          onApprove: function(data, actions) {
        *              return actions.order.capture().then(function(orderData) {
        *                  // Successful capture! For demo purposes:
        *                  console.log('Capture result', orderData, JSON.stringify(orderData, null, 2));
        *                  var transaction = orderData.purchase_units[0].payments.captures[0];
        *                  alert('Transaction '+ transaction.status + ': ' + transaction.id + '\n\nSee console for all available details');
        *  
        *                  // Replace the above to show a success message within this page, e.g.
        *                  // const element = document.getElementById('paypal-button-container');
        *                  // element.innerHTML = '';
        *                  // element.innerHTML = '<h3>Thank you for your payment!</h3>';
        *                  // Or go to another URL:  actions.redirect('thank_you.html');
        *              });
        *          }
        *  
        *  
        *      }).render('#paypal-button-container');

    -> If we want to tweak something into the PayPal related buttons, we can do:
        - you can DISABLE any type of button:
        - Source: "https://developer.paypal.com/sdk/js/configuration/#disable-funding"
        - Example:
            * <script src="https://www.paypal.com/sdk/js?client-id=YOUR_CLIENT_ID&disable-funding=credit,card"></script>